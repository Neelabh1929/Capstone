#include<iostream>
#include<bits/stdc++.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<time.h>
#include<math.h>
#include<string.h>
#include<stdbool.h>
#include<stdlib.h>
#include<dirent.h>
using namespace std;

class Time;

class Date
{
	private:
		int DD;
		int MM;
		int YYYY;
	public:
		Date()//constructor
		{
			bool Correct=false;
			while(!Correct)
			{
				cout<<"Enter Day of Task"<<endl;
				cin>>DD;
				cout<<"Enter Month of Task"<<endl;
				cin>>MM;
				cout<<"Enter Year of Task"<<endl;
				cin>>YYYY;
				if(DD==29&&MM==2&&YYYY%4==0&&MM<=12)
				{
					Correct=true;
				}
				else if(DD==31&&(MM==1||MM==3||MM==5||MM==7||MM==8||MM==10||MM==12)&&MM<=12)
				{
					Correct=true;
				}
				else if(DD==30&&(MM==4||MM==6||MM==9||MM==11)&&MM!=2&&MM<=12)
				{
					Correct=true;
				}
				else if(1<=DD&&DD<=30&&MM!=2&&MM<=12)
				{
					Correct=true;
				}
				else if(1<=DD&&DD<=28&&MM==2&&MM<=12)
				{
					Correct=true;
				}
				else
				{
					Correct=false;
					cout<<"Enter correct day"<<endl;
				}	
			}
			
		}
		Date(int t_year,int t_mon,int t_day)
		{
			DD=t_day;
			MM=t_mon;
			YYYY=t_year;
		}
		char* ShowDateStr()//used for creating file which stores all the times and task
		{
			char date[9];
			int a=DD;
			for(int i=1;i>=0;i--)
			{
				date[i]=(a%10)+48;
				a=a/10;
				
			}
			int b=MM;
			for(int i=3;i>=2;i--)
			{
				date[i]=(b%10)+48;
				b=b/10;
				
			}
			int c=YYYY;
			for(int i=7;i>=4;i--)
			{
				date[i]=(c%10)+48;
				c=c/10;
				
			}
			date[8]=0;
			return date;
		}
		int ShowDateInt()//used for sorting
		{
			int a=0;
			int b=YYYY,c=MM,d=DD;
			int i=0;
			for(i=0;i<4;i++)
			{
				a+=(b%10)*pow(10,i);
				b=b/10;	
			}
			for(;i<6;i++)
			{
				a+=(c%10)*pow(10,i);
				c=c/10;
			}
			for(;i<8;i++)
			{
				a+=(d%10)*pow(10,i);
				d=d/10;
			}
			return a;
		}
		friend bool Compare(Date A,Date B,Time C,Time D);
		friend void TaskTaker(Date A,Time B);
};

class Time
{
	private:
		int HH;
		int MM;
		int SS;
	public:
		Time()
		{
			cout<<"Enter Time in 24hr format"<<endl;
			cout<<"Midnight is 00:00:00"<<endl;
			cout<<"The range is 00:00:00 till 23:59:59"<<endl;
			bool Correct=false;
			while(Correct==false)
			{
				cout<<"Enter the hour(0,23)"<<endl;
				cin>>HH;
				cout<<"Enter the minute(0,59)"<<endl;
				cin>>MM;
				cout<<"Enter the seconds(0,59)"<<endl;
				cin>>SS;
				if(0<=HH&&HH<24&&0<=MM&&MM<59&&0<=SS&&SS<59)
				{
					Correct=true;
				}
				else
				{
					cout<<"Enter valid Time"<<endl;
				}
			}
		}
		Time(int t_hour,int t_min,int t_sec)
		{
			HH=t_hour;
			MM=t_min;
			SS=t_sec;
		}
		int ShowTimeInt()//used in sorting
		{
			int a=0,b,c,d;
			b=SS;
			c=MM;
			d=HH;
			for(int i=0;i<6;i++)
			{
					if(0<=i&&i<2)
					{
						a=a+(b%10)*pow(10,i);
						b=b/10;	
					}
					else if(2<=i&&i<4)
					{
						a=a+(c%10)*pow(10,i);
						c=c/10;
					}
					else
					{
						a=a+(d%10)*pow(10,i);
						d=d/10;
					}
			}
			return a;
		}
		char* ShowTimeStr()//used in file
		{
			char s[7];
			int i=0,b,c,d;
			b=SS;
			c=MM;
			d=HH;
			for(i=5;i>=4;i--)
			{
				s[i]=(b%10)+48;
				b=b/10;
			}
			for(i=3;i>=2;i--)
			{
				s[i]=(c%10)+48;
				c=c/10;
			}
			for(i=1;i>=0;i--)
			{
				s[i]=(d%10)+48;
				d=d/10;
			}
			s[6]=0;
			return s;
		}
		friend bool Compare(Date A,Date B,Time C,Time D);
		friend void TaskTaker(Date A,Time B);
};

bool Compare(Date A,Date B,Time C,Time D)
{
	bool exist=false;
	char str[32];
	str[0]=0;
	strcat(str,"C:/Schedule/");
	strcat(str,A.ShowDateStr());
	strcat(str,"/");
	strcat(str,C.ShowTimeStr());
	strcat(str,".txt");
	FILE* f;
	f=fopen(str,"r");
	if(f==NULL)
	{
		exist=false;
	}
	else
	{
		exist=true;
	}
	fclose(f);
	if(exist)
	{
		if(A.YYYY<B.YYYY)
		{
			return true;
		}
		else if((A.YYYY==B.YYYY)&&(A.MM<B.MM))
		{
			return true;
		}
		else if((A.YYYY==B.YYYY)&&(A.MM==B.MM)&&(A.DD<B.DD))
		{
			return true;
		}
		else if((A.YYYY==B.YYYY)&&(A.MM==B.MM)&&(A.DD==B.DD)&&(C.HH<D.HH))
		{
			return true;
		}
		else if((A.YYYY==B.YYYY)&&(A.MM==B.MM)&&(A.DD==B.DD)&&(C.HH==D.HH)&&(C.MM<D.MM))
		{
			return true;
		}
		else if((A.YYYY==B.YYYY)&&(A.MM==B.MM)&&(A.DD==B.DD)&&(C.HH==D.HH)&&(C.MM==D.MM)&&(C.SS<D.SS))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}

class Head;
class Node;

class Task
{
	private:
		int priority;
		char task[50];
		bool Linked=false;
		char date[9];
		char time1[7];//time is a function maychange it if causes further problems
		bool taskDone=false;
		bool ExeStat=false;
	public:
		Task(int p,char t[50],bool L,char d[9],char l[7],bool tD,bool eS)
		{
			priority=p;
			strcpy(task,t);
			Linked=L;
			strcpy(date,d);
			strcpy(time1,l);
			taskDone=tD;
			ExeStat=eS;
		}
		Task(Date A,Time B)
		{
			cout<<"Enter the priority of task(Medical/Financial/Educational/Other)"<<endl;
			char tmp[12];
			cin>>tmp;
			if(strcmp(tmp,"Medical")==0)
			{
				priority=1;
			}
			else if(strcmp(tmp,"Financial")==0)
			{
				priority=2;
			}
			else if(strcmp(tmp,"Educational")==0)
			{
				priority=3;
			}
			else if(strcmp(tmp,"Other")==0)
			{
				cout<<"Please enter the priority from 1(highest) to 5(lowest)"<<endl;
				cin>>priority;
			}
			cout<<"Write a brief description of task(50 characters)"<<endl;
			cin>>task;
			here:
			cout<<"Is this task linked to a previous task?"<<endl;
			cout<<"If yes then enter 1 else enter 0"<<endl;
			cin>>Linked;
			if(Linked)
			{
				cout<<"Enter the date and time of linked task"<<endl;
			
				Date D;
				Time E;
				if(!Compare(D,A,E,B))
				{
					cout<<"Enter linked task date and time which are earlier than current task and existent"<<endl;
					goto here;
				}
				char *str=D.ShowDateStr();
				int i=0;
				while(*(str+i)!=0)
				{
					date[i]=*(str+i);
					i++;
				}
				date[i]=0;
				i=0;
				str=E.ShowTimeStr();
				while(*(str+i)!=0)
				{
					time1[i]=*(str+i);
					i++;
				}
				time1[i]=0;
			}
			else
			{
				for(int i=0;i<8;i++)
				{
					if(i<6)
					{
						date[i]='N';
						time1[i]='N';
					}
					else
					{
						date[i]='N';
					}
				}
				date[8]=0;
				time1[6]=0;
			}
		}
    	friend void CreateTask();
		friend bool ShowTask();
		friend void Push(Task Q,Head* H,int counter);
		friend void Show(Head *H);
		friend void PopFront(Head* H);
};

class Head
{
	private:
		int size=0;
		Node* Front=NULL;
		Node* Rear=NULL;
	public:
		friend void Push(Task Q,Head* H,int counter);
		friend void Show(Head *H);
		//friend void ShowDet(Task Q);
		friend void PopFront(Head* H);
};

class Node
{
	private:
		Task P;
		Node* next=NULL;
	public:
		friend void Push(Task Q,Head* H,int counter);
		friend void Show(Head *H);
		//friend void ShowDet(Task Q);
		friend void PopFront(Head* H);
};

void Push(Task Q,Head* H,int counter)//we can add a counter to see how many times the function is called to the function
{
	Node *a;
	a=(Node*)malloc(sizeof(Node));
	if(a==NULL)
	{
		cout<<"Empty"<<endl;
	}
	a->P=Q;
	int b;
	b=a->P.priority;
	Node* tmp;
	tmp=H->Rear;
	if(counter!=0)
	{
	    a->next=tmp;
	    int i=1;
	    for(i=1;i<=H->size;i++)//here is the problem
	    {
	    	if(!(b<(tmp->P.priority)))//problem is it shouldnt run first if statement the first time otherwise it will accesss undefined memory
	    	{
	    		break;//think this is the problem 
	    		
			}
			a->next=tmp;
			tmp=tmp->next;
			
		}
		
		if(i==1)
		{
			H->Rear=a;
		}
		else if(i==(H->size)+1)
		{
			H->Front=a;
			(a->next)->next=a;
			a->next=NULL;
		}
		else
		{
			(a->next)->next=a;
			a->next=tmp;
		}
	}
	else if(counter==0)
	{
		H->size=0;
		H->Rear=a;
		H->Front=a;
	}
	H->size=(H->size)+1;
}

void Show(Head* H)
{
	Node* tmp;
	tmp=H->Front;
	if(tmp->P.Linked)
	{
		char file[32];
		file[0]=0;
		strcat(file,"C:/Schedule/");
		strcat(file,tmp->P.date);
		strcat(file,"/");
		strcat(file,tmp->P.time1);
		strcat(file,".txt");
		cout<<file<<endl;
		FILE *W;
		char tas[50];
		int c;
		bool eS=false;
		W=fopen(file,"r");
		
		fscanf(W,"%d",&c);
		fscanf(W,"%s",tas);
		fscanf(W,"%d",&c);
		fscanf(W,"%s",tas);
		fscanf(W,"%s",tas);
		fscanf(W,"%d",&c);
		fscanf(W,"%d",&c);
		eS=(bool)c;
		tmp->P.taskDone=(bool)c;
		fclose(W);
		if(tmp->P.taskDone)
		{
			cout<<"Your task is : "<<tmp->P.task<<endl;
		}
		else
		{
			cout<<"This task is linked but the task it was linked to is not executed or deleted : ";
			cout<<tmp->P.task<<endl;
		}
	}
	else
	{
		cout<<"Your task is : "<<tmp->P.task<<endl;
	}
}

void PopFront(Head* H)//create new pop function
{
	Node* tmp;
	tmp=H->Rear;
	if(H->size!=1)
	{
		for(int i=0;i<H->size-2;i++)//here is the problem
		{
			tmp=tmp->next;
		}
		H->Front=tmp;
		Node* buf;
		buf=tmp->next;
		free(buf);
		tmp->next=NULL;
	}
	else
	{
		free(tmp);
		H->Rear=NULL;
		H->Front=NULL;
	}
	H->size=H->size-1;
}

void CreateTask()
{
	Date A;
	Time B;
	Task C(A,B);
	char *str,c[9];
	str=A.ShowDateStr();
	int i=-1;
	do
	{
		++i;
		c[i]=*(str+i);	
	}
	while(*(str+i)!=0);
	char d[32];
	d[0]=0;
	strcat(d,"C:/Schedule/");
	strcat(d,c);
	mkdir("C:/Schedule");
	mkdir(d);
	char e[11];
	char *s;
	s=B.ShowTimeStr();
	e[0]=0;
	strcat(e,s);
	strcat(e,".txt");
	strcat(d,"/");
	strcat(d,e);
	FILE* f;
	f=fopen(d,"a");
	fprintf(f, "%s  %s  %s %d  %d  %d %d\n",C.task,C.date,C.time1,C.priority,C.Linked,C.taskDone,C.ExeStat);
	fclose(f);
}

bool ShowTask()
{
	// C:/Schedule/date/time.txt
	
	
	time_t t=time(NULL);
	struct tm *date;
	date=localtime(&t);
	int t_year,t_mon,t_day,t_hour,t_min,t_sec;
	t_year=date->tm_year+1900;
	t_mon=date->tm_mon+1;
	t_day=date->tm_mday;
	t_hour=date->tm_hour;
	t_min=date->tm_min;
	t_sec=date->tm_sec;
	Date D(t_year,t_mon,t_day);
	int a=(3600*t_hour)+(60*t_min)+t_sec;
	int m=0;
	for(int n=0;n<=200;n++)
	{
		int b=a;
		t_sec=b%60;
		b=b/60;
		t_min=b%60;
		b=b/60;
		t_hour=b%60;
		a++;
		Time T(t_hour,t_min,t_sec);
		char* str;
		str=D.ShowDateStr();
		char d[32];
		d[0]=0;
		strcat(d,"C:/Schedule/");
		strcat(d,str);
		strcat(d,"/");
		str=T.ShowTimeStr();
		strcat(d,str);
		strcat(d,".txt");
		FILE *f;
		f=fopen(d,"r");
		if(f!=NULL)
		{
			//cout<<"File is not empty"<<endl;  
			FILE* tp;
			tp=fopen("tmp.txt","a");
			Head* H;//segmentation fault!
			H=(Head*)malloc(sizeof(Head));
			if(H==NULL)
			{
				cout<<"No Memory left"<<endl;
			}
			int j=0;
			char t[50],da[9],l[7];
			int h=0;
			bool L,tD,eS;
			int a,b,c;
			while(fscanf(f,"%d",&h)!=EOF)
			{
				fscanf(f,"%s",t);
				fscanf(f,"%d",&a);
				L=(bool)a;
				fscanf(f,"%s",da);
				fscanf(f,"%s",l);
				fscanf(f,"%d",&b);
				tD=(bool)b;
				fscanf(f,"%d",&c);
				eS=(bool)c;
				Task Q(h,t,L,da,l,tD,eS);
				Push(Q,H,j);//here is the problem
				fprintf(tp,"%d %s %d %s %s %d %d\n",h,t,L,da,l,tD,1);
				j++;
			}
			fclose(tp);
			fclose(f);
			tp=fopen("tmp.txt","r");
			f=fopen(d,"w");
			for(int k=0;k<j;k++)
			{	
				fscanf(tp,"%d",&h);
				fscanf(tp,"%s",t);
				fscanf(tp,"%d",&a);
				L=(bool)a;
				fscanf(tp,"%s",da);
				fscanf(tp,"%s",l);
				fscanf(tp,"%d",&b);
				tD=(bool)b;
				fscanf(tp,"%d",&c);
				eS=(bool)c;
				fprintf(f,"%d %s %d %s %s %d %d\n",h,t,L,da,l,tD,1);
				Show(H);
				PopFront(H);
			}
			fclose(f);
			fclose(tp);
			remove("tmp.txt");
			free(H);
			m++;
		}
		else
		{
			fclose(f);
		}
	}
	
	if(m!=0)
		return true;
	else
		return false;
}

void deletetask() {
	Date C;
	Time D;
	char g[32];
	g[0]=0;
	strcat(g,"C:/Schedule/");
	strcat(g,C.ShowDateStr());
	strcat(g,"/");
	strcat(g,D.ShowTimeStr());
	strcat(g,".txt");
    cout<<g<<endl;
    FILE* f = fopen(g, "r");
    if (f != NULL) {
        fclose(f);
        if (remove(g) != 0) 
		{
            cerr << "Error deleting file: " << g<< endl;
        } 
		else 
		{
            cout << "File successfully deleted: " << g << endl;
        }
    } 
	else 
	{
		fclose(f);
        cerr << "File not found: " << g << endl;
    }
}
void reminder(){
    Date C;
	char g[32];
	g[0]=0;
	strcat(g,"C:/Schedule/");
	strcat(g,C.ShowDateStr());
    DIR *dir;
    struct dirent *entry;
    char *directoryPath =  g; 

    dir = opendir(directoryPath);
    if (dir == NULL) {
        perror("Error opening directory");
        
    }
    else{
	
    printf("Today's tasks:----\n\n");

    while ((entry = readdir(dir)) != NULL) {
        char filePath[1024];
        strcpy(filePath, directoryPath);
        strcat(filePath, "/");
        strcat(filePath, entry->d_name);

        FILE *file = fopen(filePath, "r");
        if (file) {
            printf("File: %s\n", entry->d_name);
            char line[1024];
        
            	fgets(line, sizeof(line), file);
            	printf(line);
			
			printf("\n");
            fclose(file);
        }
    }

    closedir(dir);
}
    
}

    



void UserInterface()
{
	bool repeat=true;
	while(repeat)
	{
		cout<<"Enter (0,1,2,3,4) if you want to create a task,show task,stop app,delete task,to get a reminder"<<endl;
		int a;
		cin>>a;
		switch (a)
		{
			case 0:
				CreateTask();
				break;
			case 1:
				ShowTask();
				break;
			case 2:
				repeat=false;
				break;
			case 3:
				deletetask();
				break;
			case 4:
				reminder();
				break;
			default:
				cout<<"Enter a valid number"<<endl;
				break;
		}
	}
}


int main()
{
	UserInterface();
	return 0;
}
